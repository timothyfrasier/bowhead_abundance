modelstring = "
data {
int N;            // Sample size
int nSites;       // Number of sites
int nTreatments;  // Number of treatments
vector[N] y;      // Vector of standardized plant heights
int site[N];      // Vector of indicators of which site each plant came in
int treatment[N]; // Vector of indicators of which treatment each plant was in
}
parameters {
real b1[nSites];      // Effect of being in each site
real b2[nTreatments]; // Effect of each treatment
real<lower=0> sigma;
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[site[i]] + b2[treatment[i]];
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(0, 1);
for (j in 1:nSites) {
b1[j] ~ normal(0, 1);
}
for (j in 1:nTreatments) {
b2[j] ~ normal(0, 1);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "sigma"),
warmup = 2000,
iter = 7000,
chains = 3)
site
#--------------------------------#
#  Set up site data (N = 2)      #
#  Assuming 10 plants per plot   #
#--------------------------------#
site1 = rep("site_1", times = 150)
site2 = rep("site_2", times = 150)
site = as.factor(c(site1, site2))
#--------------------------------#
# Set up treatment data (8       #
# treatments at each of the 2    #
# sites. Each site has 15 plots. #
#--------------------------------#
treatments1 = c(rep("contol", times = 10), rep("live transplant", times = 10), rep("wrack", times = 10), rep("zoned seeding", times = 10), rep("zoned planting", times = 10), rep("seeding omnibus", times = 50), rep("planting omnibus", times = 50))
treatment = as.factor(rep(treatments1, 2))
#--------------------------------#
# Effect of site (minimal, but   #
# there).                        #
#--------------------------------#
ySite = rep(0, times = 300)
for (i in 1:300) {
if (site[i] == "site_1") {
ySite[i] = rnorm(1, mean = 7, sd = 1)
} else {
ySite[i] = rnorm(1, mean = 12, sd = 1)
}
}
#------------------------#
# Effect of Treatments   #
#------------------------#
yTreat = rep(0, times = 300)
for (i in 1:300) {
if (treatment[i] == "control") {
yTreat[i] = 0
} else if (treatment[i] == "live transplant") {
yTreat[i] = rnorm(1, mean = 2, sd = 0.05)
} else if (treatment[i] == "wrack") {
yTreat[i] = rnorm(1, mean = 2, sd = 0.05)
} else if (treatment[i] == "zoned seeding") {
yTreat[i] = rnorm(1, mean = 4, sd = 0.05)
} else if (treatment[i] == "zoned planting") {
yTreat[i] = rnorm(1, mean = 4, sd = 0.05)
} else if (treatment[i] == "seeding omnibus") {
yTreat[i] = rnorm(1, mean = -2, sd = 0.05)
} else {
yTreat[i] = rnorm(1, mean = -2, sd = 0.05)
}
}
y = ySite + yTreat
hist(y)
#------------------------------#
#    Organize the Data         #
#------------------------------#
plantData = data.frame(y, site, treatment)
colnames(plantData) = c("height (cm)", "site", "treatment")
View(plantData)
##################################
#   ANALYZE THE DATA TO TEST     #
##################################
y = plantData[, 1]
N = length(y)
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
site = as.numeric(plantData[, 2])
nSites = length(unique(site))
treatment = as.numeric(plantData[, 3])
nTreatments = length(unique(treatment))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = zy,
N = N,
site = site,
nSites = nSites,
treatment = treatment,
nTreatments = nTreatments
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
library(rstan)
options(mc.cores = parallel::detectCores())
modelstring = "
data {
int N;            // Sample size
int nSites;       // Number of sites
int nTreatments;  // Number of treatments
vector[N] y;      // Vector of standardized plant heights
int site[N];      // Vector of indicators of which site each plant came in
int treatment[N]; // Vector of indicators of which treatment each plant was in
}
parameters {
real b1[nSites];      // Effect of being in each site
real b2[nTreatments]; // Effect of each treatment
real<lower=0> sigma;
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[site[i]] + b2[treatment[i]];
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(0, 1);
for (j in 1:nSites) {
b1[j] ~ normal(0, 1);
}
for (j in 1:nTreatments) {
b2[j] ~ normal(0, 1);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "sigma"),
warmup = 2000,
iter = 7000,
chains = 3)
print(stanFit)
stan_plot(stanFit, par = c("b1", "b2"))
#--------------------------------#
# Set up treatment data (8       #
# treatments at each of the 2    #
# sites. Each site has 15 plots. #
#--------------------------------#
treatments1 = c(rep("contol", times = 10), rep("live transplant", times = 10), rep("wrack", times = 10), rep("zoned seeding", times = 10), rep("zoned planting", times = 10), rep("seeding omnibus", times = 50), rep("planting omnibus", times = 50))
treatment = as.factor(rep(treatments1, 2))
y = rnorm(1000, mean = 2.5, sd = 0.5)
hist(y)
#------------------------#
# Effect of Treatments   #
#------------------------#
yTreat = rep(0, times = 300)
for (i in 1:300) {
if (treatment[i] == "control") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "live transplant") {
yTreat[i] = round(rnorm(1, mean = 3, sd = 0.5))
} else if (treatment[i] == "wrack") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "zoned seeding") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "zoned planting") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "seeding omnibus") {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
} else {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
}
}
yTreat = ifelse(yTreat < 1, 1, yTreat)
yTreat = ifelse(yTreat > 4, 4, yTreat)
hist(yTreat)
yTreat
#--------------------------------#
#  Set up site data (N = 2)      #
#  Assuming 10 plants per plot   #
#--------------------------------#
site1 = rep("site_1", times = 150)
site2 = rep("site_2", times = 150)
site = as.factor(c(site1, site2))
#--------------------------------#
# Set up treatment data (8       #
# treatments at each of the 2    #
# sites. Each site has 15 plots. #
#--------------------------------#
treatments1 = c(rep("contol", times = 10), rep("live transplant", times = 10), rep("wrack", times = 10), rep("zoned seeding", times = 10), rep("zoned planting", times = 10), rep("seeding omnibus", times = 50), rep("planting omnibus", times = 50))
treatment = as.factor(rep(treatments1, 2))
#------------------------#
# Effect of Treatments   #
#------------------------#
yTreat = rep(0, times = 300)
for (i in 1:300) {
if (treatment[i] == "control") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "live transplant") {
yTreat[i] = round(rnorm(1, mean = 3, sd = 0.5))
} else if (treatment[i] == "wrack") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "zoned seeding") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "zoned planting") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "seeding omnibus") {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
} else {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
}
}
yTreat = ifelse(yTreat < 1, 1, yTreat)
yTreat = ifelse(yTreat > 4, 4, yTreat)
y = ifelse(yTreat > 4, 4, yTreat)
health = ifelse(yTreat > 4, 4, yTreat)
#--------------------------------#
#  Set up site data (N = 2)      #
#  Assuming 10 plants per plot   #
#--------------------------------#
site1 = rep("site_1", times = 150)
site2 = rep("site_2", times = 150)
site = as.factor(c(site1, site2))
#--------------------------------#
# Set up treatment data (8       #
# treatments at each of the 2    #
# sites. Each site has 15 plots. #
#--------------------------------#
treatments1 = c(rep("contol", times = 10), rep("live transplant", times = 10), rep("wrack", times = 10), rep("zoned seeding", times = 10), rep("zoned planting", times = 10), rep("seeding omnibus", times = 50), rep("planting omnibus", times = 50))
treatment = as.factor(rep(treatments1, 2))
#--------------------------------#
# Effect of site (minimal, but   #
# there).                        #
#--------------------------------#
ySite = rep(0, times = 300)
for (i in 1:300) {
if (site[i] == "site_1") {
ySite[i] = rnorm(1, mean = 7, sd = 1)
} else {
ySite[i] = rnorm(1, mean = 12, sd = 1)
}
}
#------------------------#
# Effect of Treatments   #
#------------------------#
yTreat = rep(0, times = 300)
for (i in 1:300) {
if (treatment[i] == "control") {
yTreat[i] = 0
} else if (treatment[i] == "live transplant") {
yTreat[i] = rnorm(1, mean = 2, sd = 0.05)
} else if (treatment[i] == "wrack") {
yTreat[i] = rnorm(1, mean = 2, sd = 0.05)
} else if (treatment[i] == "zoned seeding") {
yTreat[i] = rnorm(1, mean = 4, sd = 0.05)
} else if (treatment[i] == "zoned planting") {
yTreat[i] = rnorm(1, mean = 4, sd = 0.05)
} else if (treatment[i] == "seeding omnibus") {
yTreat[i] = rnorm(1, mean = -2, sd = 0.05)
} else {
yTreat[i] = rnorm(1, mean = -2, sd = 0.05)
}
}
height = ySite + yTreat
hist(height)
#------------------------------#
#    Organize the Data         #
#------------------------------#
plantData = data.frame(round(height, 3), site, treatment)
colnames(plantData) = c("height (cm)", "site", "treatment")
colnames(plantData) = c("height", "site", "treatment")
##################################
#   ANALYZE THE DATA TO TEST     #
##################################
y = plantData[, 1]
N = length(y)
yMean = mean(y)
ySD = sd(y)
zy = (y - yMean) / ySD
site = as.numeric(plantData[, 2])
nSites = length(unique(site))
treatment = as.numeric(plantData[, 3])
nTreatments = length(unique(treatment))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = zy,
N = N,
site = site,
nSites = nSites,
treatment = treatment,
nTreatments = nTreatments
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
library(rstan)
options(mc.cores = parallel::detectCores())
modelstring = "
data {
int N;            // Sample size
int nSites;       // Number of sites
int nTreatments;  // Number of treatments
vector[N] y;      // Vector of standardized plant heights
int site[N];      // Vector of indicators of which site each plant came in
int treatment[N]; // Vector of indicators of which treatment each plant was in
}
parameters {
real b1[nSites];      // Effect of being in each site
real b2[nTreatments]; // Effect of each treatment
real<lower=0> sigma;
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[site[i]] + b2[treatment[i]];
y[i] ~ normal(mu[i], sigma);
}
// Priors
sigma ~ cauchy(0, 1);
for (j in 1:nSites) {
b1[j] ~ normal(0, 1);
}
for (j in 1:nTreatments) {
b2[j] ~ normal(0, 1);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2", "sigma"),
warmup = 2000,
iter = 7000,
chains = 3)
stan_plot(stanFit, par = c("b1", "b2"))
#--------------------------------#
#  Set up site data (N = 2)      #
#  Assuming 10 plants per plot   #
#--------------------------------#
site1 = rep("site_1", times = 150)
site2 = rep("site_2", times = 150)
site = as.factor(c(site1, site2))
#--------------------------------#
# Set up treatment data (8       #
# treatments at each of the 2    #
# sites. Each site has 15 plots. #
#--------------------------------#
treatments1 = c(rep("contol", times = 10), rep("live transplant", times = 10), rep("wrack", times = 10), rep("zoned seeding", times = 10), rep("zoned planting", times = 10), rep("seeding omnibus", times = 50), rep("planting omnibus", times = 50))
treatment = as.factor(rep(treatments1, 2))
#------------------------#
# Effect of Treatments   #
#------------------------#
yTreat = rep(0, times = 300)
for (i in 1:300) {
if (treatment[i] == "control") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "live transplant") {
yTreat[i] = round(rnorm(1, mean = 3, sd = 0.5))
} else if (treatment[i] == "wrack") {
yTreat[i] = round(rnorm(1, mean = 2.5, sd = 0.5))
} else if (treatment[i] == "zoned seeding") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "zoned planting") {
yTreat[i] = round(rnorm(1, mean = 3.5, sd = 0.5))
} else if (treatment[i] == "seeding omnibus") {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
} else {
yTreat[i] = round(rnorm(1, mean = 1, sd = 0.5))
}
}
yTreat = ifelse(yTreat < 1, 1, yTreat)
health = ifelse(yTreat > 4, 4, yTreat)
#------------------------------#
#    Organize the Data         #
#------------------------------#
plantData = data.frame(health, round(height, 3), site, treatment)
colnames(plantData) = c("health", "height", "site", "treatment")
##################################
#   ANALYZE THE DATA TO TEST     #
##################################
y = plantData[, 1]
N = length(y)
site = as.numeric(plantData[, 3])
nSites = length(unique(site))
treatment = as.numeric(plantData[, 4])
nTreatments = length(unique(treatment))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = y,
N = N,
site = site,
nSites = nSites,
treatment = treatment,
nTreatments = nTreatments
)
#-----------------------------#
# Define the model and write  #
# a string for Stan           #
#-----------------------------#
library(rstan)
options(mc.cores = parallel::detectCores())
y
nLevels = length(unique(y))
#-----------------------------#
# Create a data list for Stan #
#-----------------------------#
dataList = list(
y = y,
K = nLevels,
N = N,
site = site,
nSites = nSites,
treatment = treatment,
nTreatments = nTreatments
)
modelstring = "
data {
int N;            // Sample size
int K;            // Number of ordered outcomes
int nSites;       // Number of sites
int nTreatments;  // Number of treatments
int y[N];         // Vector of standardized plant heights
int site[N];      // Vector of indicators of which site each plant came in
int treatment[N]; // Vector of indicators of which treatment each plant was in
}
parameters {
real b1[nSites];      // Effect of being in each site
real b2[nTreatments]; // Effect of each treatment
ordered[K-1] c;
}
model {
// Definitions
vector[N] mu;
// Likelihood
for (i in 1:N) {
mu[i] = b1[site[i]] + b2[treatment[i]];
y[i] ~ ordered_logistic(mu[i], c);
}
// Priors
for (j in 1:nSites) {
b1[j] ~ normal(0, 1);
}
for (j in 1:nTreatments) {
b2[j] ~ normal(0, 1);
}
}
"
writeLines(modelstring, con = "model.stan")
#--------------------------#
#     run STAN             #
#--------------------------#
stanFit <- stan(file = "model.stan",
data = dataList,
pars = c("b1", "b2"),
warmup = 2000,
iter = 7000,
chains = 3)
print(stanFit)
stan_plot(stanFit, par = c("b1", "b2"))
write.csv(plantData, "plantData.csv")
setwd("~/Research_Projects/Bowhead Whale/Papers/Abundance Estimation/Word_Versions/PLoS_One_Stan/supplementary_information/code")
simPop1 = read.table("simPop1_Post.csv", header = TRUE, sep = ",")
simPop2 = read.table("simPop2_Post.csv", header = TRUE, sep = ",")
simPop3 = read.table("simPop3_Post.csv", header = TRUE, sep = ",")
simPop4 = read.table("simPop4_Post.csv", header = TRUE, sep = ",")
movements = read.table("simMovementEstimates.csv", header = TRUE, sep = ",")
source("CellCalculation_4locations_Posteriors_1.R")
histcounts = cellcounts(pop1post = simPop1[, "N"], pop2post = simPop2[, "N"], pop3post = simPop3[, "N"], pop4post = simPop4[, "N"], m12post = movements[1:30000, "theta.1"], m13post = movements[1:30000, "theta.2"], m14post = movements[1:30000, "theta.3"], m23post = movements[1:30000, "theta.4"], m24post = movements[1:30000, "theta.5"], m34post = movements[1:30000, "theta.6"], m5post = movements[1:30000, "mean_groups"])
source("InferIndividuals_4locationsMetric_Counts.R")
missing = infermissing(histcounts = histcounts)
write.csv(missing, "simMissing.csv")
source("CellCalculation_4locations_Posteriors_2.R")
totalPop = totals(pop1post = simPop1[, "N"], pop2post = simPop2[, "N"], pop3post = simPop3[, "N"], pop4post = simPop4[, "N"], pop5post = missing, m12post = movements[1:30000, "theta.1"], m13post = movements[1:30000, "theta.2"], m14post = movements[1:30000, "theta.3"], m23post = movements[1:30000, "theta.4"], m24post = movements[1:30000, "theta.5"], m34post = movements[1:30000, "theta.6"], m5post = movements[1:30000, "mean_groups"])
write.csv(totalPop, "simTotalPop.csv")
